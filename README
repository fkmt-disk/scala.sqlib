create table m_address(
    row_id integer not null
  , zip_code char(7) not null
  , state varchar(128) not null
  , city varchar(128) not null
  , town varchar(128) not null
  , modify_at timestamp not null default current timestamp
  , constraint m_address_pkc primary key (row_id)
)

こんなテーブルがあった時に、

val rows: List[M_Address] = M_Address.select.where( row_id >= 123 and town <> "fuga" ).go(conn)

こんなふうにSELECTを書きたいSCALAのSQLライブラリ。


まだ未完成。
SQL文を構築するロジックだけ作った。
実際にDBにSQL投げるところはこれから。



val rows: List[M_Address] = M_Address
  .select( row_id, zip_code, modify_at )
  .where( row_id >= 123 and (state ~ "hoge" or town <> "fuga") )
  .distinct
  .orderBy( modify_at.desc, zip_code.asc )
  .go(conn)

このコードは

select distinct row_id, zip_code, modify_at
from m_address
where ( row_id >= 123 and ( state like '%' || ? || '%' or town <> ?) )
order by modift_at desc, zip_code asc

[123, hoge, fuga]

こんなSQLを作る。
PreparedStatementでDBに投げる（予定）。

※） 「~」はlike
※） 「!=」は使えない「<>」のみ


その他、サンプル(test/src/test/Main.scala参照)

val rows: List[M_Address] = M_Address
  .select( row_id, zip_code, modify_at )
  .where( row_id >= 123 and (state ~ "hoge" or town <> "fuga") )
  .distinct
  .orderBy( modify_at.desc, zip_code.asc )
  .go(conn)
// => select distinct row_id, zip_code, modify_at
//    from m_address
//    where ( row_id >= ? and ( state like ('%' || ? || '%') or town <> ? ) )
//    order by modify_at desc, zip_code asc
// List(123, hoge, fuga)

M_Address.select.where( row_id >= 123 and state ~ "hoge" or town <> "fuga" ).go(conn)
// => select * from m_address
//    where ( row_id >= ? and state like ('%' || ? || '%') or town <> ? )
// List(123, hoge, fuga)

M_Address.select.go(conn)
// => select * from m_address

M_Address.select(row_id).distinct.go(conn)
// => select distinct row_id from m_address

M_Address.select.orderBy( row_id.asc ).go(conn)
// => select * from m_address order by row_id asc

val mod_row_count = M_Address.update
  .set( row_id = None, modify_at = "2013-02-27 00:22:12" )
  .where( state == "piyo" )
  .go(conn)
// => update m_address
//    set row_id = ?, modify_at = ?
//    where ( state = ? )
// List(null, Wed Feb 27 00:22:12 JST 2013, piyo)

M_Address.update.set( row_id = None, modify_at = new Date ).go(conn)
// => update m_address set row_id = ?, modify_at = ?
// List(null, Wed Feb 27 00:52:39 JST 2013)

M_Address.update.where( state == "piyo" ).go(conn)
// => update m_address where ( state = ? )
// List(piyo)

M_Address.insert.values( row_id = 123, state = "hoge", city = "fuga" ).go(conn)
// => insert into m_address (row_id, state, city) values (?, ?, ?)
// List(123, hoge, fuga)

M_Address.delete.where( row_id > 100 ).go(conn)
// => delete from m_address where ( row_id > ? )
// List(100)

M_Address.delete.go(conn)
// => delete from m_address



■TODO
・作ったSQL文をDBに投げるところ作り込む
・各テーブルに対応するEntityクラスをDataBaseMetaDataから読み取って自動生成する

